{
    "docs": [
        {
            "location": "/", 
            "text": "ApplySyntax\n\n\nDetect and apply syntax in Sublime Text.\n\n\n\n\nOverview\n\n\nApplySyntax is a plugin for Sublime Text that allows you to detect and apply the syntax of files that might not otherwise be detected properly. For example, files with the \n.rb\n extension are usually Ruby files, but when they are found in a Rails project, they could be RSpec spec files, Cucumber step files, Ruby on Rails files (controllers, models, etc), or just plain Ruby files. This is actually the problem I was trying to solve when I started working on this plugin.\n\n\nCredits\n\n\nDetectSyntax was originally created by phillipkoebbe.  In his words, these are his credits:\n\n\n\n\nIt all started by forking the plugin created by JeanMertz \n(1)\n. I modified it quite extensively until I ended up with something entirely my own \n(2)\n. @maxim and @omarramos commented on the gist and suggested it should be part of Package Control. As I had created it solely for my own consumption, it seemed a bit \nhard-coded\n to be valuable as a package, but then I took a look at SetSyntax \n(3)\n. and saw how using settings would make it very flexible. That set me on the path that led to DetectSyntax.\n\n\n\n\n \nphillipkoebbe\n\n\nInstallation\n\n\nThe recommended installation method is via Package Control.  Learn more here: \nhttps://sublime.wbond.net/\n.", 
            "title": "About ApplySyntax"
        }, 
        {
            "location": "/#applysyntax", 
            "text": "Detect and apply syntax in Sublime Text.", 
            "title": "ApplySyntax"
        }, 
        {
            "location": "/#overview", 
            "text": "ApplySyntax is a plugin for Sublime Text that allows you to detect and apply the syntax of files that might not otherwise be detected properly. For example, files with the  .rb  extension are usually Ruby files, but when they are found in a Rails project, they could be RSpec spec files, Cucumber step files, Ruby on Rails files (controllers, models, etc), or just plain Ruby files. This is actually the problem I was trying to solve when I started working on this plugin.", 
            "title": "Overview"
        }, 
        {
            "location": "/#credits", 
            "text": "DetectSyntax was originally created by phillipkoebbe.  In his words, these are his credits:   It all started by forking the plugin created by JeanMertz  (1) . I modified it quite extensively until I ended up with something entirely my own  (2) . @maxim and @omarramos commented on the gist and suggested it should be part of Package Control. As I had created it solely for my own consumption, it seemed a bit  hard-coded  to be valuable as a package, but then I took a look at SetSyntax  (3) . and saw how using settings would make it very flexible. That set me on the path that led to DetectSyntax.     phillipkoebbe", 
            "title": "Credits"
        }, 
        {
            "location": "/#installation", 
            "text": "The recommended installation method is via Package Control.  Learn more here:  https://sublime.wbond.net/ .", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/", 
            "text": "Installation\n\n\nInstalling ApplySyntax.\n\n\n\n\nPackage Control\n\n\nThe recommended way to install ApplySyntax is via \nPackage Control\n.  Package Control will install the correct branch on your system and keep it up to date.\n\n\n\n\n\n\nEnsure Package Control is installed.  Instructions are found \nhere\n.\n\n\n\n\n\n\nIn sublime, press \nctrl\n + \nshift\n + \np\n (Win, Linux) or \ncmd\n + \nshift\n + \np\n (OSX) to bring up the quick panel.  It will show a list of installable plugins.\n\n\n\n\n\n\nStart typing \nApplySyntax\n, when you see it, select it.\n\n\n\n\n\n\nRestart to be sure everything is loaded proper.\n\n\n\n\n\n\nEnjoy!\n\n\n\n\n\n\nGit Cloning\n\n\n\n\nWarning\n\n\nThis is not the recommended way to install ApplySyntax for the casual user as it requires the user to know which branch to install, know how to use git, and \nwill not\n get automatically updated.\n\n\nIf you are forking for a pull request, this is the way to go, just replace the official repository with the link for your fork.\n\n\n\n\n\n\n\n\nQuit Sublime Text.\n\n\n\n\n\n\nOpen a terminal:\n\n\ncd /path/to/Sublime Text 3/Packages\ngit clone https://github.com/facelessuser/ApplySyntax.git ApplySyntax\n\n\n\n\n\n\n\n\n\n3 Restart Sublime Text.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#installation", 
            "text": "Installing ApplySyntax.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#package-control", 
            "text": "The recommended way to install ApplySyntax is via  Package Control .  Package Control will install the correct branch on your system and keep it up to date.    Ensure Package Control is installed.  Instructions are found  here .    In sublime, press  ctrl  +  shift  +  p  (Win, Linux) or  cmd  +  shift  +  p  (OSX) to bring up the quick panel.  It will show a list of installable plugins.    Start typing  ApplySyntax , when you see it, select it.    Restart to be sure everything is loaded proper.    Enjoy!", 
            "title": "Package Control"
        }, 
        {
            "location": "/installation/#git-cloning", 
            "text": "Warning  This is not the recommended way to install ApplySyntax for the casual user as it requires the user to know which branch to install, know how to use git, and  will not  get automatically updated.  If you are forking for a pull request, this is the way to go, just replace the official repository with the link for your fork.     Quit Sublime Text.    Open a terminal:  cd /path/to/Sublime Text 3/Packages\ngit clone https://github.com/facelessuser/ApplySyntax.git ApplySyntax    3 Restart Sublime Text.", 
            "title": "Git Cloning"
        }, 
        {
            "location": "/usage/", 
            "text": "User Guide\n\n\nConfiguring and using ApplySyntax.\n\n\n\n\nOverview\n\n\nApplySyntax is based on the idea of creating rules for applying certain syntaxes to specific files. You define the rules, the plugin checks them. The first one to pass wins.\n\n\nApplySyntax allows you to create your own custom rules. The easiest way to get started is to create a settings file called \nApplySyntax.sublime-settings\n in your \nPackages/User\n folder.  You can override the default settings in \nPackages/ApplySyntax/ApplySyntax.sublime-settings\n by setting them in your \nPackages/User/ApplySyntax.sublime-settings\n file. You can override any setting to meet your needs.  To prepend rules to the default rule set, you can create a key called \nsyntaxes\n (modifying \ndefault_syntaxes\n will wipe out all the default rules and is not recommended as you won\nt get the latest updates).\n\n\nCreating Rules\n\n\nEach rule is a dictionary within the syntax array.  Let\ns take a look at the top level parameters.\n\n\nSyntax\n\n\nThe \nsyntax\n attribute is the syntax file that will be applied to a view which meets the criteria defined in the rule.\n\n\nFor syntax files you must specify the path to the syntax file. The plugin is capable of supporting multiple levels of folder nesting if you need it to. For example, if you had all of your tmLanguage files for Rails organized in a folder like this: \nPackages/Rails/Language/*.tmLanguage\n, and you were looking to use the \nRuby Haml.tmLanguage\n file, the path to name translation would simply be: \nPackages/Rails/Language/Ruby Haml.tmLanguage\n -\n \nRails/Language/Ruby Haml\n.\n\n\nsyntax\n:\n \nRails/Language/Ruby Haml\n\n\n\n\n\n\nNotice that the paths are relative to the \nPackages\n folder.  Also, notice that we don\nt specify the extension.  Sublime Text in build 3084 added a new language syntax with the extension \nsublime-syntax\n.  In Sublime builds \n= 3084, ApplySyntax will first default to \nsublime-syntax\n and fall back to \ntmLanguage\n if it cannot find the the other format.  If you want to force the syntax, just specify the extension; the extension must be either \nsublime-syntax\n or \ntmLanguage\n.\n\n\nsyntax\n:\n \nRails/Language/Ruby Haml.tmLanguage\n\n\n\n\n\n\nIf it is desirable for the syntax rule to reference multiple tmLanguage files because it is not known which package will be on a machine, you can set the syntax as an array of syntaxes as shown in the following example.  The first one found will be used.\n\n\nsyntax\n:\n \n[\nRSpec/RSpec\n,\n \nRSpec (snippets and syntax)/Syntaxes/RSpec\n]\n\n\n\n\n\n\nNotice that each syntax file has a different path since they come from completely different plugins.\n\n\n\n\nDeprecation\n\n\nThe previous name for this key was \nname\n and has been deprecated and will be removed in the future.\n\n\n\n\nExtensions\n\n\nThe \nextensions\n attribute is used to define extensions to apply a syntax to.  \nextensions\n is an array of strings where each string is an extension.  No \n.\n is needed when defining extensions, unless it is desired to target a dot file like \n.gitignore\n, then you would include the \n.\n.\n\n\n    \n{\n\n        \nsyntax\n:\n \nYAML/YAML\n,\n\n        \nextensions\n:\n \n[\n.gemrc\n,\n \nyml\n,\n \nyml.dist\n]\n\n    \n},\n\n\n\n\n\n\nextensions\n is evaluated before all other rules, and it never takes part in \nmatch all\n rule sets as it is run separate from the normal rule sets; if an extension is matched here, all other rules will be skipped.\n\n\nAn added benefit of \nextensions\n, if you are using \nST3\n and set \nadd_exts_to_lang_settings\n to \ntrue\n, is that ApplySyntax will add the extensions to the specified syntax language\ns settings file in your \nUser\n folder.  By doing this, Sublime Text will be able to show the associated icon for the file type in the sidebar.  Apply syntax will also create a file \nApplySyntax.ext-list\n in your \nUser\n folder and track which extension it added so that if you remove a rule, ApplySyntax will only remove the extensions it added to the language file in question. If you do not like this functionality, you can simply disable \nadd_exts_to_lang_settings\n by setting it to \nfalse\n.\n\n\n\n\nNote\n\n\nadd_exts_to_lang_settings\n will not be applied to \nextensions\n found in a \nproject specific rule\n, as project specific rules are not global, but the effects of \nadd_exts_to_lang_settings\n are global.\n\n\n\n\nMatch\n\n\nmatch\n is a setting that you either include or omit.  When included, you set it to \nall\n.  When set, all rules defined must be met for a match to be considered successful.  \nmatch\n ignores the \nextensions\n key as \nextensions\n never take part in \nmatch all\n rule sets.  If you want to include an extension rule in a \nmatch all\n rule set, then a \nfile_path\n rule should be used.\n\n\n    \nmatch\n:\n \nall\n\n\n\n\n\n\nSo in this case, all the rules must match for the syntax to be applied:\n\n\n     \nsyntax\n:\n \nHandlebars/Handlebars\n,\n\n     \nmatch\n:\n \nall\n,\n\n     \nrules\n:\n \n[\n\n         \n{\nfile_path\n:\n \n.*\\\\.html$\n},\n\n         \n{\ncontains\n:\n \nscript [^\n]*type=\\\ntext\\\\/x-handlebars\\\n[^\n]*\n}\n\n     \n]\n\n\n\n\n\n\nIn this case, there is no \nmatch\n key, so only one rule needs to match:\n\n\n    \n{\n\n        \nsyntax\n:\n \nRuby/Ruby\n,\n\n        \nrules\n:\n \n[\n\n            \n{\nfile_path\n:\n \n.*(\\\\\\\\|/)Gemfile$\n},\n\n            \n{\nfile_path\n:\n \n.*(\\\\\\\\|/)Capfile$\n},\n\n            \n{\nfile_path\n:\n \n.*(\\\\\\\\|/)Guardfile$\n},\n\n            \n{\nfile_path\n:\n \n.*(\\\\\\\\|/)[Rr]akefile$\n},\n\n            \n{\nfile_path\n:\n \n.*(\\\\\\\\|/)Berksfile$\n},\n\n            \n{\nfile_path\n:\n \n.*(\\\\\\\\|/)[Cc]heffile$\n},\n\n            \n{\nfile_path\n:\n \n.*(\\\\\\\\|/)Thorfile$\n},\n\n            \n{\nfile_path\n:\n \n.*(\\\\\\\\|/)Podfile$\n},\n\n            \n{\nfile_path\n:\n \n.*(\\\\\\\\|/)config.ru$\n},\n\n            \n{\nfile_path\n:\n \n.*\\\\\\\\Vagrantfile(\\\\\\\\..*)?$\n},\n\n            \n{\nfile_path\n:\n \n.*/Vagrantfile(/..*)?$\n},\n\n            \n{\nfile_path\n:\n \n.*\\\\.thor$\n},\n\n            \n{\nfile_path\n:\n \n.*\\\\.rake$\n},\n\n            \n{\nfile_path\n:\n \n.*\\\\.simplecov$\n},\n\n            \n{\nfile_path\n:\n \n.*\\\\.jbuilder$\n},\n\n            \n{\nfile_path\n:\n \n.*\\\\.rb$\n},\n\n            \n{\nfile_path\n:\n \n.*\\\\.podspec$\n},\n\n            \n{\nfile_path\n:\n \n.*\\\\.rabl$\n},\n\n            \n{\ninterpreter\n:\n \nruby\n}\n\n        \n]\n\n    \n},\n\n\n\n\n\n\nRules\n\n\nrules\n is an array of rules that can be used to target specific files with your defined syntax file.  The rules are processed until the first rule matches, so order your rules in a way that makes sense to you.\n\n\nFile Path Rule\n\n\nA \nfile_path\n rule defines a regex to match against the complete file path. The pattern is always anchored to the beginning of the path, as if there were an implicit \n^\n \u2014 so the pattern \n/a/b/c\n will match the file \n/a/b/c/foo.py\n, but not the file \n/x/y/z/a/b/c/foo.py\n. (You may include an explicit \n^\n at the beginning of the pattern, as some of the default rules do \u2014 but the result is the same either way.)\n\n\nFor backwards compatibility with older versions of ApplySyntax, the rule name \nfile_name\n is also accepted, and functions exactly like \nfile_path\n.\n\n\n{\nfile_path\n:\n \n.*\\\\.xml(\\\\.dist)?$\n},\n\n\n\n\n\n\n\n\nDeprecation\n\n\nThe previous name for this key was \nfile_name\n and has been deprecated and will be removed in the future.\n\n\n\n\nFirst Line Rule\n\n\nA \nfirst_line\n rule allows you to check whether the first line of the file\ns content matches a given regex. As with \nfile_path\n \nrules\n, the pattern is always anchored to the beginning of the line.\n\n\n{\nfirst_line\n:\n \n^\n\\\\?xml\n},\n\n\n\n\n\n\nInterpreter (Shebang)\n\n\nAn \ninterpreter\n rule does the same thing as a \nfirst_line\n rule that uses a regex to match an interpreter directive (shebang).  The difference being that ApplySyntax will construct the regex for you.\n\n\nSo a \nfirst_line\n rule:\n\n\n{\nfirst_line\n:\n \n^#\\\\!(?:.+)ruby\n}\n\n\n\n\n\n\nCan be simplified as:\n\n\n{\ninterpreter\n:\n \nruby\n}\n\n\n\n\n\n\nFor backwards compatibility with older versions of ApplySyntax, the rule name \nbinary\n is also accepted, and functions exactly like \ninterpreter\n.\n\n\n\n\nDeprecation\n\n\nThe previous name for this key was \nbinary\n and has been deprecated and will be removed in the future.\n\n\n\n\nFunction Rule\n\n\nThis is an example of using a custom function to decide whether or not to apply a syntax. The source file should be in a plugin folder. \nname\n is the function name and \nsource\n is the file in which the function is contained; you must include the package it resides in, all sub-folders leading to the file, and the actual file name (extension not needed as it is assumed to be a python file).\n\n\nWhen this function is called, the full file path of the given file will be passed to it as the only argument. You are free to do whatever you want in your function, just return \nTrue\n or \nFalse\n to indicate whether a match was made.  But please be conscious of keeping it quick and light if possible.\n\n\n{\nfunction\n:\n \n{\nname\n:\n \nis_rails_file\n,\n \nsource\n:\n \nApplySyntax/is_rails_file\n}}\n\n\n\n\n\n\n\n\nTip\n\n\nWhen placing a function rule module in a package, it is advised to put it in a sub-folder.  The sub-folder does not need an \n__init__.py\n, it just needs your module(s).\n\n\n\n\nContent Rule\n\n\nSometimes a filename or first line search is just not enough and maybe a function rule is overkill.  In this case, maybe searching the content of a file can be enough.  You can search a file\ns content with regex for a specific token via the \ncontains\n rule.\n\n\n{\ncontains\n:\n \nscript [^\n]*type=\\\ntext\\\\/x-handlebars\\\n[^\n]*\n}\n\n\n\n\n\n\n\n\nTip\n\n\nIt is recommended to pair \ncontains\n rules with other rules via the \nmatch\n:\n \nall\n option to ensure you don\nt search every file (which can significantly slow down the editor); this will also help ensure get more reliable matches. If pairing with other rules as dependencies, it is advised to pair the \ncontains\n rule after the other required rule(s) to ensure you search the content of as few files as possible.\n\n\nAlso, try to use very specific regex to ensure you don\nt get false positives.\n\n\n\n\nProject Specific Rules\n\n\nTo define project specific syntaxes, just add \nproject_syntaxes\n to your project file.  \nproject_syntaxes\n is an array; just add your syntax rules to \nproject_syntaxes\n just like you would add them to \nsyntaxes\n in your user settings file, and ApplySyntax will prepend the rules to the beginning of your defined rules.  The order of rules is as follows: project \n user \n default.\n\n\nThere is one difference between project specific rules and global rules.  In project rules, the \nextensions\n key will not be applied to the associated syntax language settings file as project specific rules are not global, but language settings files are global.\n\n\n    \nproject_syntaxes\n:\n \n[\n\n        \n{\n\n            \nsyntax\n:\n \nXML/XML\n,\n\n            \nrules\n:\n \n[\n\n                \n{\nfile_path\n:\n \n.*\\\\.xml(\\\\.dist)?$\n},\n\n                \n{\nfirst_line\n:\n \n^\n\\\\?xml\n}\n\n            \n]\n\n        \n}\n\n    \n]\n\n\n\n\n\n\nSettings Options\n\n\nThere are a couple of general settings found in \nApplySyntax.sublime-settings\n.\n\n\nRe-Raise Exceptions\n\n\nIf an exception occurs when processing a function, this will re-raised the captured exception in Sublime\ns console so the user get feedback. This is really only useful to those writing functions. The average user shouldn\nt need this.  By default, the setting will be set to \nfalse\n.\n\n\n    \nreraise_exceptions\n:\n \nfalse\n,\n\n\n\n\n\n\nNew File Syntax\n\n\nIf you want to have a syntax applied when new files are created, set \nnew_file_syntax\n to the name of the syntax to use. The format is exactly the same as the \nsyntax\n parameter in the syntax rules mentioned earlier. For example, if you want to have a new file use JavaScript syntax, set \nnew_file_syntax\n to \nJavaScript/JavaScript\n.  The default is \nfalse\n.\n\n\n    \nnew_file_syntax\n:\n \nJavaScript/JavaScript\n,\n\n\n\n\n\n\nAdd Extensions to Language Settings\n\n\nTo enable adding defined extensions to language settings, just set \nadd_exts_to_lang_settings\n to \ntrue\n.  See \nExtensions\n for more info.\n\n\n    \nadd_exts_to_lang_settings\n:\n \ntrue\n,\n\n\n\n\n\n\nTroubleshooting and Debugging\n\n\nBy default, the \ndebug\n setting is turned on so that users have some form of visual feedback in the console that ApplySyntax is working.  This can be turned off by setting \ndebug\n to \nfalse\n.  If developing, you can set \ndebug\n to \nverbose\n to get even more info in the console.\n\n\n    \n// Control level of logging in the console.\n\n    \n// (true|false|\nverbose\n)\n\n    \ndebug\n:\n \ntrue\n,", 
            "title": "User Guide"
        }, 
        {
            "location": "/usage/#user-guide", 
            "text": "Configuring and using ApplySyntax.", 
            "title": "User Guide"
        }, 
        {
            "location": "/usage/#overview", 
            "text": "ApplySyntax is based on the idea of creating rules for applying certain syntaxes to specific files. You define the rules, the plugin checks them. The first one to pass wins.  ApplySyntax allows you to create your own custom rules. The easiest way to get started is to create a settings file called  ApplySyntax.sublime-settings  in your  Packages/User  folder.  You can override the default settings in  Packages/ApplySyntax/ApplySyntax.sublime-settings  by setting them in your  Packages/User/ApplySyntax.sublime-settings  file. You can override any setting to meet your needs.  To prepend rules to the default rule set, you can create a key called  syntaxes  (modifying  default_syntaxes  will wipe out all the default rules and is not recommended as you won t get the latest updates).", 
            "title": "Overview"
        }, 
        {
            "location": "/usage/#creating-rules", 
            "text": "Each rule is a dictionary within the syntax array.  Let s take a look at the top level parameters.  Syntax  The  syntax  attribute is the syntax file that will be applied to a view which meets the criteria defined in the rule.  For syntax files you must specify the path to the syntax file. The plugin is capable of supporting multiple levels of folder nesting if you need it to. For example, if you had all of your tmLanguage files for Rails organized in a folder like this:  Packages/Rails/Language/*.tmLanguage , and you were looking to use the  Ruby Haml.tmLanguage  file, the path to name translation would simply be:  Packages/Rails/Language/Ruby Haml.tmLanguage  -   Rails/Language/Ruby Haml .  syntax :   Rails/Language/Ruby Haml   Notice that the paths are relative to the  Packages  folder.  Also, notice that we don t specify the extension.  Sublime Text in build 3084 added a new language syntax with the extension  sublime-syntax .  In Sublime builds  = 3084, ApplySyntax will first default to  sublime-syntax  and fall back to  tmLanguage  if it cannot find the the other format.  If you want to force the syntax, just specify the extension; the extension must be either  sublime-syntax  or  tmLanguage .  syntax :   Rails/Language/Ruby Haml.tmLanguage   If it is desirable for the syntax rule to reference multiple tmLanguage files because it is not known which package will be on a machine, you can set the syntax as an array of syntaxes as shown in the following example.  The first one found will be used.  syntax :   [ RSpec/RSpec ,   RSpec (snippets and syntax)/Syntaxes/RSpec ]   Notice that each syntax file has a different path since they come from completely different plugins.   Deprecation  The previous name for this key was  name  and has been deprecated and will be removed in the future.   Extensions  The  extensions  attribute is used to define extensions to apply a syntax to.   extensions  is an array of strings where each string is an extension.  No  .  is needed when defining extensions, unless it is desired to target a dot file like  .gitignore , then you would include the  . .       { \n         syntax :   YAML/YAML , \n         extensions :   [ .gemrc ,   yml ,   yml.dist ] \n     },   extensions  is evaluated before all other rules, and it never takes part in  match all  rule sets as it is run separate from the normal rule sets; if an extension is matched here, all other rules will be skipped.  An added benefit of  extensions , if you are using  ST3  and set  add_exts_to_lang_settings  to  true , is that ApplySyntax will add the extensions to the specified syntax language s settings file in your  User  folder.  By doing this, Sublime Text will be able to show the associated icon for the file type in the sidebar.  Apply syntax will also create a file  ApplySyntax.ext-list  in your  User  folder and track which extension it added so that if you remove a rule, ApplySyntax will only remove the extensions it added to the language file in question. If you do not like this functionality, you can simply disable  add_exts_to_lang_settings  by setting it to  false .   Note  add_exts_to_lang_settings  will not be applied to  extensions  found in a  project specific rule , as project specific rules are not global, but the effects of  add_exts_to_lang_settings  are global.   Match  match  is a setting that you either include or omit.  When included, you set it to  all .  When set, all rules defined must be met for a match to be considered successful.   match  ignores the  extensions  key as  extensions  never take part in  match all  rule sets.  If you want to include an extension rule in a  match all  rule set, then a  file_path  rule should be used.       match :   all   So in this case, all the rules must match for the syntax to be applied:        syntax :   Handlebars/Handlebars , \n      match :   all , \n      rules :   [ \n          { file_path :   .*\\\\.html$ }, \n          { contains :   script [^ ]*type=\\ text\\\\/x-handlebars\\ [^ ]* } \n      ]   In this case, there is no  match  key, so only one rule needs to match:       { \n         syntax :   Ruby/Ruby , \n         rules :   [ \n             { file_path :   .*(\\\\\\\\|/)Gemfile$ }, \n             { file_path :   .*(\\\\\\\\|/)Capfile$ }, \n             { file_path :   .*(\\\\\\\\|/)Guardfile$ }, \n             { file_path :   .*(\\\\\\\\|/)[Rr]akefile$ }, \n             { file_path :   .*(\\\\\\\\|/)Berksfile$ }, \n             { file_path :   .*(\\\\\\\\|/)[Cc]heffile$ }, \n             { file_path :   .*(\\\\\\\\|/)Thorfile$ }, \n             { file_path :   .*(\\\\\\\\|/)Podfile$ }, \n             { file_path :   .*(\\\\\\\\|/)config.ru$ }, \n             { file_path :   .*\\\\\\\\Vagrantfile(\\\\\\\\..*)?$ }, \n             { file_path :   .*/Vagrantfile(/..*)?$ }, \n             { file_path :   .*\\\\.thor$ }, \n             { file_path :   .*\\\\.rake$ }, \n             { file_path :   .*\\\\.simplecov$ }, \n             { file_path :   .*\\\\.jbuilder$ }, \n             { file_path :   .*\\\\.rb$ }, \n             { file_path :   .*\\\\.podspec$ }, \n             { file_path :   .*\\\\.rabl$ }, \n             { interpreter :   ruby } \n         ] \n     },   Rules  rules  is an array of rules that can be used to target specific files with your defined syntax file.  The rules are processed until the first rule matches, so order your rules in a way that makes sense to you.  File Path Rule  A  file_path  rule defines a regex to match against the complete file path. The pattern is always anchored to the beginning of the path, as if there were an implicit  ^  \u2014 so the pattern  /a/b/c  will match the file  /a/b/c/foo.py , but not the file  /x/y/z/a/b/c/foo.py . (You may include an explicit  ^  at the beginning of the pattern, as some of the default rules do \u2014 but the result is the same either way.)  For backwards compatibility with older versions of ApplySyntax, the rule name  file_name  is also accepted, and functions exactly like  file_path .  { file_path :   .*\\\\.xml(\\\\.dist)?$ },    Deprecation  The previous name for this key was  file_name  and has been deprecated and will be removed in the future.   First Line Rule  A  first_line  rule allows you to check whether the first line of the file s content matches a given regex. As with  file_path   rules , the pattern is always anchored to the beginning of the line.  { first_line :   ^ \\\\?xml },   Interpreter (Shebang)  An  interpreter  rule does the same thing as a  first_line  rule that uses a regex to match an interpreter directive (shebang).  The difference being that ApplySyntax will construct the regex for you.  So a  first_line  rule:  { first_line :   ^#\\\\!(?:.+)ruby }   Can be simplified as:  { interpreter :   ruby }   For backwards compatibility with older versions of ApplySyntax, the rule name  binary  is also accepted, and functions exactly like  interpreter .   Deprecation  The previous name for this key was  binary  and has been deprecated and will be removed in the future.   Function Rule  This is an example of using a custom function to decide whether or not to apply a syntax. The source file should be in a plugin folder.  name  is the function name and  source  is the file in which the function is contained; you must include the package it resides in, all sub-folders leading to the file, and the actual file name (extension not needed as it is assumed to be a python file).  When this function is called, the full file path of the given file will be passed to it as the only argument. You are free to do whatever you want in your function, just return  True  or  False  to indicate whether a match was made.  But please be conscious of keeping it quick and light if possible.  { function :   { name :   is_rails_file ,   source :   ApplySyntax/is_rails_file }}    Tip  When placing a function rule module in a package, it is advised to put it in a sub-folder.  The sub-folder does not need an  __init__.py , it just needs your module(s).   Content Rule  Sometimes a filename or first line search is just not enough and maybe a function rule is overkill.  In this case, maybe searching the content of a file can be enough.  You can search a file s content with regex for a specific token via the  contains  rule.  { contains :   script [^ ]*type=\\ text\\\\/x-handlebars\\ [^ ]* }    Tip  It is recommended to pair  contains  rules with other rules via the  match :   all  option to ensure you don t search every file (which can significantly slow down the editor); this will also help ensure get more reliable matches. If pairing with other rules as dependencies, it is advised to pair the  contains  rule after the other required rule(s) to ensure you search the content of as few files as possible.  Also, try to use very specific regex to ensure you don t get false positives.   Project Specific Rules  To define project specific syntaxes, just add  project_syntaxes  to your project file.   project_syntaxes  is an array; just add your syntax rules to  project_syntaxes  just like you would add them to  syntaxes  in your user settings file, and ApplySyntax will prepend the rules to the beginning of your defined rules.  The order of rules is as follows: project   user   default.  There is one difference between project specific rules and global rules.  In project rules, the  extensions  key will not be applied to the associated syntax language settings file as project specific rules are not global, but language settings files are global.       project_syntaxes :   [ \n         { \n             syntax :   XML/XML , \n             rules :   [ \n                 { file_path :   .*\\\\.xml(\\\\.dist)?$ }, \n                 { first_line :   ^ \\\\?xml } \n             ] \n         } \n     ]   Settings Options  There are a couple of general settings found in  ApplySyntax.sublime-settings .  Re-Raise Exceptions  If an exception occurs when processing a function, this will re-raised the captured exception in Sublime s console so the user get feedback. This is really only useful to those writing functions. The average user shouldn t need this.  By default, the setting will be set to  false .       reraise_exceptions :   false ,   New File Syntax  If you want to have a syntax applied when new files are created, set  new_file_syntax  to the name of the syntax to use. The format is exactly the same as the  syntax  parameter in the syntax rules mentioned earlier. For example, if you want to have a new file use JavaScript syntax, set  new_file_syntax  to  JavaScript/JavaScript .  The default is  false .       new_file_syntax :   JavaScript/JavaScript ,   Add Extensions to Language Settings  To enable adding defined extensions to language settings, just set  add_exts_to_lang_settings  to  true .  See  Extensions  for more info.       add_exts_to_lang_settings :   true ,   Troubleshooting and Debugging  By default, the  debug  setting is turned on so that users have some form of visual feedback in the console that ApplySyntax is working.  This can be turned off by setting  debug  to  false .  If developing, you can set  debug  to  verbose  to get even more info in the console.       // Control level of logging in the console. \n     // (true|false| verbose ) \n     debug :   true ,", 
            "title": "Creating Rules"
        }, 
        {
            "location": "/contributing/", 
            "text": "Contributing \n Support\n\n\nSteps for contributing and getting support.\n\n\n\n\nOverview\n\n\n\n\n\n\n\n\nSublime Versions\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nST2\n=\nversion\nST3\n\n\nSupported on a separate branch, but not actively.  Any further fixes or enhancements must come from the community.  Issues for versions less than \nST3\n will not be addressed moving forward by me.  Pull requests are welcome for back-porting features, enhancements, or fixes to the old branch, but the content of the pull \nmust\n already exist on the main, actively developed branch.  I will not allow an older branch to exceed the main branch in regards to functionality.\n\n\n\n\n\n\nST3\n\n\nFully supported and actively maintained.\n\n\n\n\n\n\n\n\nContribution from the community is encouraged and can be done in a variety of ways:\n\n\n\n\nBug reports.\n\n\nReviewing code.\n\n\nCode patches via pull requests.\n\n\nDocumentation improvements via pull requests.\n\n\n\n\nBug Reports\n\n\n\n\n\n\nPlease \nread the documentation\n and \nsearch the issue tracker\n to try to find the answer to your question \nbefore\n posting an issue.\n\n\n\n\n\n\nWhen creating an issue on the repository, please provide as much info as possible:\n\n\n\n\nSublime Text build.\n\n\nOperating system.\n\n\nErrors in console.\n\n\nDetailed description of the problem.\n\n\nExamples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.\n\n\n\n\nThe more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.\n\n\n\n\n\n\nBe prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.\n\n\n\n\n\n\nReviewing Code\n\n\nTake part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.\n\n\nPull Requests\n\n\nPull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.\n\n\nContinuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.\n\n\nFeel free to use a virtual environment if you are concerned about installing any of the Python packages.  In the future, I may use tox, but as I currently only test on Python 3.3, I wanted to keep things simple.\n\n\nRunning Validation Tests\n\n\n\n\nTip\n\n\nIf you are running Sublime on a OSX or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below):\n\n\nchmod +x run_tests.sh\n./run_tests.sh\n\n\n\n\n\n\n\nThere are a couple of dependencies that must be present before running the tests.\n\n\n\n\n\n\nAs \nST3\n is the only current actively supported version, Python 3.3 must be used to validate the tests.\n\n\n\n\n\n\nUnit tests are run with \nnose\n.  You can install nose via:\n\n\npip install nose\n\n\n\n\n\nThe tests should be run from the root folder of the plugin by using the following command:\n\n\nnosetests .\n\n\n\n\n\n\n\n\n\nLinting is performed on the entire project with \nflake8\n \nflake8_docstrings\n, \npep8-naming\n.  These can be installed via:\n\n\npip install flake8\npip install flake8_docstrings\npip install pep8-naming\n\n\n\n\n\nLinting is performed with the following command:\n\n\nflake8 .\n\n\n\n\n\n\n\n\n\nDocumentation Improvements\n\n\nA ton of time has been not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn\nt be any need to run validation tests if only updating documentation.\n\n\nI currently use a combination of using [mkdocs][mkdocs.org] with my own custom Python Markdown \nextensions\n to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is \nmkdocs serve\n.", 
            "title": "Contributing &amp; Support"
        }, 
        {
            "location": "/contributing/#contributing-support", 
            "text": "Steps for contributing and getting support.", 
            "title": "Contributing  Support"
        }, 
        {
            "location": "/contributing/#overview", 
            "text": "Sublime Versions  Description      ST2 = version ST3  Supported on a separate branch, but not actively.  Any further fixes or enhancements must come from the community.  Issues for versions less than  ST3  will not be addressed moving forward by me.  Pull requests are welcome for back-porting features, enhancements, or fixes to the old branch, but the content of the pull  must  already exist on the main, actively developed branch.  I will not allow an older branch to exceed the main branch in regards to functionality.    ST3  Fully supported and actively maintained.     Contribution from the community is encouraged and can be done in a variety of ways:   Bug reports.  Reviewing code.  Code patches via pull requests.  Documentation improvements via pull requests.", 
            "title": "Overview"
        }, 
        {
            "location": "/contributing/#bug-reports", 
            "text": "Please  read the documentation  and  search the issue tracker  to try to find the answer to your question  before  posting an issue.    When creating an issue on the repository, please provide as much info as possible:   Sublime Text build.  Operating system.  Errors in console.  Detailed description of the problem.  Examples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.   The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.    Be prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.", 
            "title": "Bug Reports"
        }, 
        {
            "location": "/contributing/#reviewing-code", 
            "text": "Take part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.", 
            "title": "Reviewing Code"
        }, 
        {
            "location": "/contributing/#pull-requests", 
            "text": "Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.  Continuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.  Feel free to use a virtual environment if you are concerned about installing any of the Python packages.  In the future, I may use tox, but as I currently only test on Python 3.3, I wanted to keep things simple.  Running Validation Tests   Tip  If you are running Sublime on a OSX or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below):  chmod +x run_tests.sh\n./run_tests.sh   There are a couple of dependencies that must be present before running the tests.    As  ST3  is the only current actively supported version, Python 3.3 must be used to validate the tests.    Unit tests are run with  nose .  You can install nose via:  pip install nose  The tests should be run from the root folder of the plugin by using the following command:  nosetests .    Linting is performed on the entire project with  flake8   flake8_docstrings ,  pep8-naming .  These can be installed via:  pip install flake8\npip install flake8_docstrings\npip install pep8-naming  Linting is performed with the following command:  flake8 .", 
            "title": "Pull Requests"
        }, 
        {
            "location": "/contributing/#documentation-improvements", 
            "text": "A ton of time has been not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn t be any need to run validation tests if only updating documentation.  I currently use a combination of using [mkdocs][mkdocs.org] with my own custom Python Markdown  extensions  to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is  mkdocs serve .", 
            "title": "Documentation Improvements"
        }
    ]
}